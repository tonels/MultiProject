<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tonels.mbdemo3.dao.OfficesMapper">
  <resultMap id="BaseResultMap" type="tonels.mbdemo3.entity.Offices">

    <id column="officeCode" jdbcType="VARCHAR" property="officecode" />
    <result column="city" jdbcType="VARCHAR" property="city" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="addressLine1" jdbcType="VARCHAR" property="addressline1" />
    <result column="addressLine2" jdbcType="VARCHAR" property="addressline2" />
    <result column="state" jdbcType="VARCHAR" property="state" />
    <result column="country" jdbcType="VARCHAR" property="country" />
    <result column="postalCode" jdbcType="VARCHAR" property="postalcode" />
    <result column="territory" jdbcType="VARCHAR" property="territory" />
  </resultMap>
  <sql id="Base_Column_List">

    officeCode, city, phone, addressLine1, addressLine2, state, country, postalCode, 
    territory
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">

    select 
    <include refid="Base_Column_List" />
    from offices
    where officeCode = #{officecode,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">

    delete from offices
    where officeCode = #{officecode,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="tonels.mbdemo3.entity.Offices">

    insert into offices (officeCode, city, phone, 
      addressLine1, addressLine2, state, 
      country, postalCode, territory
      )
    values (#{officecode,jdbcType=VARCHAR}, #{city,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, 
      #{addressline1,jdbcType=VARCHAR}, #{addressline2,jdbcType=VARCHAR}, #{state,jdbcType=VARCHAR}, 
      #{country,jdbcType=VARCHAR}, #{postalcode,jdbcType=VARCHAR}, #{territory,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="tonels.mbdemo3.entity.Offices">

    insert into offices
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="officecode != null">
        officeCode,
      </if>
      <if test="city != null">
        city,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="addressline1 != null">
        addressLine1,
      </if>
      <if test="addressline2 != null">
        addressLine2,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="country != null">
        country,
      </if>
      <if test="postalcode != null">
        postalCode,
      </if>
      <if test="territory != null">
        territory,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="officecode != null">
        #{officecode,jdbcType=VARCHAR},
      </if>
      <if test="city != null">
        #{city,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="addressline1 != null">
        #{addressline1,jdbcType=VARCHAR},
      </if>
      <if test="addressline2 != null">
        #{addressline2,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=VARCHAR},
      </if>
      <if test="country != null">
        #{country,jdbcType=VARCHAR},
      </if>
      <if test="postalcode != null">
        #{postalcode,jdbcType=VARCHAR},
      </if>
      <if test="territory != null">
        #{territory,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="tonels.mbdemo3.entity.Offices">

    update offices
    <set>
      <if test="city != null">
        city = #{city,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="addressline1 != null">
        addressLine1 = #{addressline1,jdbcType=VARCHAR},
      </if>
      <if test="addressline2 != null">
        addressLine2 = #{addressline2,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=VARCHAR},
      </if>
      <if test="country != null">
        country = #{country,jdbcType=VARCHAR},
      </if>
      <if test="postalcode != null">
        postalCode = #{postalcode,jdbcType=VARCHAR},
      </if>
      <if test="territory != null">
        territory = #{territory,jdbcType=VARCHAR},
      </if>
    </set>
    where officeCode = #{officecode,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="tonels.mbdemo3.entity.Offices">

    update offices
    set city = #{city,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      addressLine1 = #{addressline1,jdbcType=VARCHAR},
      addressLine2 = #{addressline2,jdbcType=VARCHAR},
      state = #{state,jdbcType=VARCHAR},
      country = #{country,jdbcType=VARCHAR},
      postalCode = #{postalcode,jdbcType=VARCHAR},
      territory = #{territory,jdbcType=VARCHAR}
    where officeCode = #{officecode,jdbcType=VARCHAR}
  </update>
  <select id="selectByJoin" resultMap="BaseResultMap">
    SELECT
	employeese1_.employeeNumber AS num,
	employeese1_.email AS email,
	customerse2_.customerNumber AS cNum,
	customerse2_.state AS cState
FROM
	offices officesent0_
	LEFT OUTER JOIN employees employeese1_ ON ( officesent0_.officeCode = employeese1_.officeCode )
	LEFT OUTER JOIN customers customerse2_ ON ( employeese1_.employeeNumber = customerse2_.salesRepEmployeeNumber )
  </select>

  <select id="selectOffEmCu" parameterType="tonels.mbdemo3.params.Offparams" resultMap="BaseResultMap">
    SELECT
    oc.officeCode,
    oc.country AS offCountry,
    oc.state AS offState,
    em.employeeNumber AS emNumber,
    em.email AS emEmail,
    cu.customerNumber AS cuNumber,
    cu.state AS cuState
    FROM
    offices oc
    LEFT OUTER JOIN employees em ON ( oc.officeCode = em.officeCode )
    LEFT OUTER JOIN customers cu ON ( em.employeeNumber = cu.salesRepEmployeeNumber )
    WHERE 1 = 1
    AND ( oc.state LIKE '%a%' )
    AND em.employeeNumber >= 100
    AND cu.state = 'ca'
    ORDER BY
    em.employeeNumber DESC
    LIMIT 20
    <if test="ocState!=null">  and oc.state LIKE '%#{ocState}%'  </if>
    <if test="emNumber!=null">  and em.employeeNumber >= #{deptName}  </if>
    <if test="cuState!=null">  and cu.state = #{deptName}  </if>


  </select>

</mapper>